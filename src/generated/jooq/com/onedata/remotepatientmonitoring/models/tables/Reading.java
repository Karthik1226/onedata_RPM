/*
 * This file is generated by jOOQ.
 */
package com.onedata.remotepatientmonitoring.models.tables;


import com.onedata.remotepatientmonitoring.models.Keys;
import com.onedata.remotepatientmonitoring.models.Public;
import com.onedata.remotepatientmonitoring.models.enums.ReadingType;
import com.onedata.remotepatientmonitoring.models.tables.Device.DevicePath;
import com.onedata.remotepatientmonitoring.models.tables.records.ReadingRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reading extends TableImpl<ReadingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.reading</code>
     */
    public static final Reading READING = new Reading();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReadingRecord> getRecordType() {
        return ReadingRecord.class;
    }

    /**
     * The column <code>public.reading.id</code>.
     */
    public final TableField<ReadingRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.reading.timestamp</code>.
     */
    public final TableField<ReadingRecord, OffsetDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.reading.type</code>.
     */
    public final TableField<ReadingRecord, ReadingType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(ReadingType.class), this, "");

    /**
     * The column <code>public.reading.heart_rate_value</code>.
     */
    public final TableField<ReadingRecord, BigDecimal> HEART_RATE_VALUE = createField(DSL.name("heart_rate_value"), SQLDataType.NUMERIC(5, 2), this, "");

    /**
     * The column <code>public.reading.systolic</code>.
     */
    public final TableField<ReadingRecord, BigDecimal> SYSTOLIC = createField(DSL.name("systolic"), SQLDataType.NUMERIC(5, 2), this, "");

    /**
     * The column <code>public.reading.diastolic</code>.
     */
    public final TableField<ReadingRecord, BigDecimal> DIASTOLIC = createField(DSL.name("diastolic"), SQLDataType.NUMERIC(5, 2), this, "");

    /**
     * The column <code>public.reading.device_id</code>.
     */
    public final TableField<ReadingRecord, Integer> DEVICE_ID = createField(DSL.name("device_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Reading(Name alias, Table<ReadingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Reading(Name alias, Table<ReadingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.reading</code> table reference
     */
    public Reading(String alias) {
        this(DSL.name(alias), READING);
    }

    /**
     * Create an aliased <code>public.reading</code> table reference
     */
    public Reading(Name alias) {
        this(alias, READING);
    }

    /**
     * Create a <code>public.reading</code> table reference
     */
    public Reading() {
        this(DSL.name("reading"), null);
    }

    public <O extends Record> Reading(Table<O> path, ForeignKey<O, ReadingRecord> childPath, InverseForeignKey<O, ReadingRecord> parentPath) {
        super(path, childPath, parentPath, READING);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ReadingPath extends Reading implements Path<ReadingRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ReadingPath(Table<O> path, ForeignKey<O, ReadingRecord> childPath, InverseForeignKey<O, ReadingRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ReadingPath(Name alias, Table<ReadingRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ReadingPath as(String alias) {
            return new ReadingPath(DSL.name(alias), this);
        }

        @Override
        public ReadingPath as(Name alias) {
            return new ReadingPath(alias, this);
        }

        @Override
        public ReadingPath as(Table<?> alias) {
            return new ReadingPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ReadingRecord, Integer> getIdentity() {
        return (Identity<ReadingRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReadingRecord> getPrimaryKey() {
        return Keys.READING_PKEY;
    }

    @Override
    public List<ForeignKey<ReadingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.READING__READING_DEVICE_ID_FKEY);
    }

    private transient DevicePath _device;

    /**
     * Get the implicit join path to the <code>public.device</code> table.
     */
    public DevicePath device() {
        if (_device == null)
            _device = new DevicePath(this, Keys.READING__READING_DEVICE_ID_FKEY, null);

        return _device;
    }

    @Override
    public List<Check<ReadingRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("reading_check"), "((((type = 'heartRate'::reading_type) AND (heart_rate_value IS NOT NULL) AND (systolic IS NULL) AND (diastolic IS NULL)) OR ((type = 'BP'::reading_type) AND (systolic IS NOT NULL) AND (diastolic IS NOT NULL) AND (heart_rate_value IS NULL))))", true)
        );
    }

    @Override
    public Reading as(String alias) {
        return new Reading(DSL.name(alias), this);
    }

    @Override
    public Reading as(Name alias) {
        return new Reading(alias, this);
    }

    @Override
    public Reading as(Table<?> alias) {
        return new Reading(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reading rename(String name) {
        return new Reading(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reading rename(Name name) {
        return new Reading(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reading rename(Table<?> name) {
        return new Reading(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Reading where(Condition condition) {
        return new Reading(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Reading where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Reading where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Reading where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Reading where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Reading where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Reading where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Reading where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Reading whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Reading whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
