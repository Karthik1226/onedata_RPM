/*
 * This file is generated by jOOQ.
 */
package com.onedata.remotepatientmonitoring.models.tables;


import com.onedata.remotepatientmonitoring.models.Keys;
import com.onedata.remotepatientmonitoring.models.Public;
import com.onedata.remotepatientmonitoring.models.tables.Device.DevicePath;
import com.onedata.remotepatientmonitoring.models.tables.Doctor.DoctorPath;
import com.onedata.remotepatientmonitoring.models.tables.DoctorPatient.DoctorPatientPath;
import com.onedata.remotepatientmonitoring.models.tables.records.PatientRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Patient extends TableImpl<PatientRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.patient</code>
     */
    public static final Patient PATIENT = new Patient();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatientRecord> getRecordType() {
        return PatientRecord.class;
    }

    /**
     * The column <code>public.patient.id</code>.
     */
    public final TableField<PatientRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.patient.name</code>.
     */
    public final TableField<PatientRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.patient.age</code>.
     */
    public final TableField<PatientRecord, Integer> AGE = createField(DSL.name("age"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.patient.gender</code>.
     */
    public final TableField<PatientRecord, String> GENDER = createField(DSL.name("gender"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private Patient(Name alias, Table<PatientRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Patient(Name alias, Table<PatientRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.patient</code> table reference
     */
    public Patient(String alias) {
        this(DSL.name(alias), PATIENT);
    }

    /**
     * Create an aliased <code>public.patient</code> table reference
     */
    public Patient(Name alias) {
        this(alias, PATIENT);
    }

    /**
     * Create a <code>public.patient</code> table reference
     */
    public Patient() {
        this(DSL.name("patient"), null);
    }

    public <O extends Record> Patient(Table<O> path, ForeignKey<O, PatientRecord> childPath, InverseForeignKey<O, PatientRecord> parentPath) {
        super(path, childPath, parentPath, PATIENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PatientPath extends Patient implements Path<PatientRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PatientPath(Table<O> path, ForeignKey<O, PatientRecord> childPath, InverseForeignKey<O, PatientRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PatientPath(Name alias, Table<PatientRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PatientPath as(String alias) {
            return new PatientPath(DSL.name(alias), this);
        }

        @Override
        public PatientPath as(Name alias) {
            return new PatientPath(alias, this);
        }

        @Override
        public PatientPath as(Table<?> alias) {
            return new PatientPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PatientRecord, Integer> getIdentity() {
        return (Identity<PatientRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PatientRecord> getPrimaryKey() {
        return Keys.PATIENT_PKEY;
    }

    private transient DevicePath _device;

    /**
     * Get the implicit to-many join path to the <code>public.device</code>
     * table
     */
    public DevicePath device() {
        if (_device == null)
            _device = new DevicePath(this, null, Keys.DEVICE__DEVICE_ASSIGNED_PATIENT_ID_FKEY.getInverseKey());

        return _device;
    }

    private transient DoctorPatientPath _doctorPatient;

    /**
     * Get the implicit to-many join path to the
     * <code>public.doctor_patient</code> table
     */
    public DoctorPatientPath doctorPatient() {
        if (_doctorPatient == null)
            _doctorPatient = new DoctorPatientPath(this, null, Keys.DOCTOR_PATIENT__DOCTOR_PATIENT_PATIENT_ID_FKEY.getInverseKey());

        return _doctorPatient;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.doctor</code>
     * table
     */
    public DoctorPath doctor() {
        return doctorPatient().doctor();
    }

    @Override
    public Patient as(String alias) {
        return new Patient(DSL.name(alias), this);
    }

    @Override
    public Patient as(Name alias) {
        return new Patient(alias, this);
    }

    @Override
    public Patient as(Table<?> alias) {
        return new Patient(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(String name) {
        return new Patient(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(Name name) {
        return new Patient(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(Table<?> name) {
        return new Patient(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Patient where(Condition condition) {
        return new Patient(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Patient where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Patient where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Patient where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Patient where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Patient where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Patient where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Patient where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Patient whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Patient whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
