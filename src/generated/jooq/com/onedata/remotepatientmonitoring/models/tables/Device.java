/*
 * This file is generated by jOOQ.
 */
package com.onedata.remotepatientmonitoring.models.tables;


import com.onedata.remotepatientmonitoring.models.Keys;
import com.onedata.remotepatientmonitoring.models.Public;
import com.onedata.remotepatientmonitoring.models.tables.Patient.PatientPath;
import com.onedata.remotepatientmonitoring.models.tables.Reading.ReadingPath;
import com.onedata.remotepatientmonitoring.models.tables.records.DeviceRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Device extends TableImpl<DeviceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.device</code>
     */
    public static final Device DEVICE = new Device();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeviceRecord> getRecordType() {
        return DeviceRecord.class;
    }

    /**
     * The column <code>public.device.id</code>.
     */
    public final TableField<DeviceRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.device.serial_number</code>.
     */
    public final TableField<DeviceRecord, String> SERIAL_NUMBER = createField(DSL.name("serial_number"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.device.assigned_patient_id</code>.
     */
    public final TableField<DeviceRecord, Integer> ASSIGNED_PATIENT_ID = createField(DSL.name("assigned_patient_id"), SQLDataType.INTEGER, this, "");

    private Device(Name alias, Table<DeviceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Device(Name alias, Table<DeviceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.device</code> table reference
     */
    public Device(String alias) {
        this(DSL.name(alias), DEVICE);
    }

    /**
     * Create an aliased <code>public.device</code> table reference
     */
    public Device(Name alias) {
        this(alias, DEVICE);
    }

    /**
     * Create a <code>public.device</code> table reference
     */
    public Device() {
        this(DSL.name("device"), null);
    }

    public <O extends Record> Device(Table<O> path, ForeignKey<O, DeviceRecord> childPath, InverseForeignKey<O, DeviceRecord> parentPath) {
        super(path, childPath, parentPath, DEVICE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DevicePath extends Device implements Path<DeviceRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DevicePath(Table<O> path, ForeignKey<O, DeviceRecord> childPath, InverseForeignKey<O, DeviceRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DevicePath(Name alias, Table<DeviceRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DevicePath as(String alias) {
            return new DevicePath(DSL.name(alias), this);
        }

        @Override
        public DevicePath as(Name alias) {
            return new DevicePath(alias, this);
        }

        @Override
        public DevicePath as(Table<?> alias) {
            return new DevicePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DeviceRecord, Integer> getIdentity() {
        return (Identity<DeviceRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DeviceRecord> getPrimaryKey() {
        return Keys.DEVICE_PKEY;
    }

    @Override
    public List<UniqueKey<DeviceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.DEVICE_ASSIGNED_PATIENT_ID_KEY, Keys.DEVICE_SERIAL_NUMBER_KEY);
    }

    @Override
    public List<ForeignKey<DeviceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DEVICE__DEVICE_ASSIGNED_PATIENT_ID_FKEY);
    }

    private transient PatientPath _patient;

    /**
     * Get the implicit join path to the <code>public.patient</code> table.
     */
    public PatientPath patient() {
        if (_patient == null)
            _patient = new PatientPath(this, Keys.DEVICE__DEVICE_ASSIGNED_PATIENT_ID_FKEY, null);

        return _patient;
    }

    private transient ReadingPath _reading;

    /**
     * Get the implicit to-many join path to the <code>public.reading</code>
     * table
     */
    public ReadingPath reading() {
        if (_reading == null)
            _reading = new ReadingPath(this, null, Keys.READING__READING_DEVICE_ID_FKEY.getInverseKey());

        return _reading;
    }

    @Override
    public Device as(String alias) {
        return new Device(DSL.name(alias), this);
    }

    @Override
    public Device as(Name alias) {
        return new Device(alias, this);
    }

    @Override
    public Device as(Table<?> alias) {
        return new Device(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Device rename(String name) {
        return new Device(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Device rename(Name name) {
        return new Device(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Device rename(Table<?> name) {
        return new Device(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Device where(Condition condition) {
        return new Device(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Device where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Device where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Device where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Device where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Device where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Device where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Device where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Device whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Device whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
