/*
 * This file is generated by jOOQ.
 */
package com.onedata.remotepatientmonitoring.models.tables.records;


import com.onedata.remotepatientmonitoring.models.enums.ReadingType;
import com.onedata.remotepatientmonitoring.models.tables.Reading;

import java.math.BigDecimal;
import java.time.OffsetDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReadingRecord extends UpdatableRecordImpl<ReadingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.reading.id</code>.
     */
    public ReadingRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.reading.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.reading.timestamp</code>.
     */
    public ReadingRecord setTimestamp(OffsetDateTime value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.reading.timestamp</code>.
     */
    public OffsetDateTime getTimestamp() {
        return (OffsetDateTime) get(1);
    }

    /**
     * Setter for <code>public.reading.type</code>.
     */
    public ReadingRecord setType(ReadingType value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.reading.type</code>.
     */
    public ReadingType getType() {
        return (ReadingType) get(2);
    }

    /**
     * Setter for <code>public.reading.heart_rate_value</code>.
     */
    public ReadingRecord setHeartRateValue(BigDecimal value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.reading.heart_rate_value</code>.
     */
    public BigDecimal getHeartRateValue() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>public.reading.systolic</code>.
     */
    public ReadingRecord setSystolic(BigDecimal value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.reading.systolic</code>.
     */
    public BigDecimal getSystolic() {
        return (BigDecimal) get(4);
    }

    /**
     * Setter for <code>public.reading.diastolic</code>.
     */
    public ReadingRecord setDiastolic(BigDecimal value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.reading.diastolic</code>.
     */
    public BigDecimal getDiastolic() {
        return (BigDecimal) get(5);
    }

    /**
     * Setter for <code>public.reading.device_id</code>.
     */
    public ReadingRecord setDeviceId(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.reading.device_id</code>.
     */
    public Integer getDeviceId() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ReadingRecord
     */
    public ReadingRecord() {
        super(Reading.READING);
    }

    /**
     * Create a detached, initialised ReadingRecord
     */
    public ReadingRecord(Integer id, OffsetDateTime timestamp, ReadingType type, BigDecimal heartRateValue, BigDecimal systolic, BigDecimal diastolic, Integer deviceId) {
        super(Reading.READING);

        setId(id);
        setTimestamp(timestamp);
        setType(type);
        setHeartRateValue(heartRateValue);
        setSystolic(systolic);
        setDiastolic(diastolic);
        setDeviceId(deviceId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ReadingRecord
     */
    public ReadingRecord(com.onedata.remotepatientmonitoring.models.tables.pojos.Reading value) {
        super(Reading.READING);

        if (value != null) {
            setId(value.getId());
            setTimestamp(value.getTimestamp());
            setType(value.getType());
            setHeartRateValue(value.getHeartRateValue());
            setSystolic(value.getSystolic());
            setDiastolic(value.getDiastolic());
            setDeviceId(value.getDeviceId());
            resetChangedOnNotNull();
        }
    }
}
