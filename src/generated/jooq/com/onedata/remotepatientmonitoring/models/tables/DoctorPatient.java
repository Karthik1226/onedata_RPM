/*
 * This file is generated by jOOQ.
 */
package com.onedata.remotepatientmonitoring.models.tables;


import com.onedata.remotepatientmonitoring.models.Keys;
import com.onedata.remotepatientmonitoring.models.Public;
import com.onedata.remotepatientmonitoring.models.tables.Doctor.DoctorPath;
import com.onedata.remotepatientmonitoring.models.tables.Patient.PatientPath;
import com.onedata.remotepatientmonitoring.models.tables.records.DoctorPatientRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DoctorPatient extends TableImpl<DoctorPatientRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.doctor_patient</code>
     */
    public static final DoctorPatient DOCTOR_PATIENT = new DoctorPatient();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DoctorPatientRecord> getRecordType() {
        return DoctorPatientRecord.class;
    }

    /**
     * The column <code>public.doctor_patient.doctor_id</code>.
     */
    public final TableField<DoctorPatientRecord, Integer> DOCTOR_ID = createField(DSL.name("doctor_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.doctor_patient.patient_id</code>.
     */
    public final TableField<DoctorPatientRecord, Integer> PATIENT_ID = createField(DSL.name("patient_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private DoctorPatient(Name alias, Table<DoctorPatientRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DoctorPatient(Name alias, Table<DoctorPatientRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.doctor_patient</code> table reference
     */
    public DoctorPatient(String alias) {
        this(DSL.name(alias), DOCTOR_PATIENT);
    }

    /**
     * Create an aliased <code>public.doctor_patient</code> table reference
     */
    public DoctorPatient(Name alias) {
        this(alias, DOCTOR_PATIENT);
    }

    /**
     * Create a <code>public.doctor_patient</code> table reference
     */
    public DoctorPatient() {
        this(DSL.name("doctor_patient"), null);
    }

    public <O extends Record> DoctorPatient(Table<O> path, ForeignKey<O, DoctorPatientRecord> childPath, InverseForeignKey<O, DoctorPatientRecord> parentPath) {
        super(path, childPath, parentPath, DOCTOR_PATIENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DoctorPatientPath extends DoctorPatient implements Path<DoctorPatientRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DoctorPatientPath(Table<O> path, ForeignKey<O, DoctorPatientRecord> childPath, InverseForeignKey<O, DoctorPatientRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DoctorPatientPath(Name alias, Table<DoctorPatientRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DoctorPatientPath as(String alias) {
            return new DoctorPatientPath(DSL.name(alias), this);
        }

        @Override
        public DoctorPatientPath as(Name alias) {
            return new DoctorPatientPath(alias, this);
        }

        @Override
        public DoctorPatientPath as(Table<?> alias) {
            return new DoctorPatientPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DoctorPatientRecord> getPrimaryKey() {
        return Keys.DOCTOR_PATIENT_PKEY;
    }

    @Override
    public List<ForeignKey<DoctorPatientRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DOCTOR_PATIENT__DOCTOR_PATIENT_DOCTOR_ID_FKEY, Keys.DOCTOR_PATIENT__DOCTOR_PATIENT_PATIENT_ID_FKEY);
    }

    private transient DoctorPath _doctor;

    /**
     * Get the implicit join path to the <code>public.doctor</code> table.
     */
    public DoctorPath doctor() {
        if (_doctor == null)
            _doctor = new DoctorPath(this, Keys.DOCTOR_PATIENT__DOCTOR_PATIENT_DOCTOR_ID_FKEY, null);

        return _doctor;
    }

    private transient PatientPath _patient;

    /**
     * Get the implicit join path to the <code>public.patient</code> table.
     */
    public PatientPath patient() {
        if (_patient == null)
            _patient = new PatientPath(this, Keys.DOCTOR_PATIENT__DOCTOR_PATIENT_PATIENT_ID_FKEY, null);

        return _patient;
    }

    @Override
    public DoctorPatient as(String alias) {
        return new DoctorPatient(DSL.name(alias), this);
    }

    @Override
    public DoctorPatient as(Name alias) {
        return new DoctorPatient(alias, this);
    }

    @Override
    public DoctorPatient as(Table<?> alias) {
        return new DoctorPatient(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DoctorPatient rename(String name) {
        return new DoctorPatient(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DoctorPatient rename(Name name) {
        return new DoctorPatient(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DoctorPatient rename(Table<?> name) {
        return new DoctorPatient(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DoctorPatient where(Condition condition) {
        return new DoctorPatient(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DoctorPatient where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DoctorPatient where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DoctorPatient where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DoctorPatient where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DoctorPatient where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DoctorPatient where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DoctorPatient where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DoctorPatient whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DoctorPatient whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
