/*
 * This file is generated by jOOQ.
 */
package com.onedata.remotepatientmonitoring.models.tables.pojos;


import com.onedata.remotepatientmonitoring.models.enums.ReadingType;

import java.io.Serializable;
import java.math.BigDecimal;
import java.time.OffsetDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reading implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer id;
    private OffsetDateTime timestamp;
    private ReadingType type;
    private BigDecimal heartRateValue;
    private BigDecimal systolic;
    private BigDecimal diastolic;
    private Integer deviceId;

    public Reading() {}

    public Reading(Reading value) {
        this.id = value.id;
        this.timestamp = value.timestamp;
        this.type = value.type;
        this.heartRateValue = value.heartRateValue;
        this.systolic = value.systolic;
        this.diastolic = value.diastolic;
        this.deviceId = value.deviceId;
    }

    public Reading(
        Integer id,
        OffsetDateTime timestamp,
        ReadingType type,
        BigDecimal heartRateValue,
        BigDecimal systolic,
        BigDecimal diastolic,
        Integer deviceId
    ) {
        this.id = id;
        this.timestamp = timestamp;
        this.type = type;
        this.heartRateValue = heartRateValue;
        this.systolic = systolic;
        this.diastolic = diastolic;
        this.deviceId = deviceId;
    }

    /**
     * Getter for <code>public.reading.id</code>.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.reading.id</code>.
     */
    public Reading setId(Integer id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>public.reading.timestamp</code>.
     */
    public OffsetDateTime getTimestamp() {
        return this.timestamp;
    }

    /**
     * Setter for <code>public.reading.timestamp</code>.
     */
    public Reading setTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Getter for <code>public.reading.type</code>.
     */
    public ReadingType getType() {
        return this.type;
    }

    /**
     * Setter for <code>public.reading.type</code>.
     */
    public Reading setType(ReadingType type) {
        this.type = type;
        return this;
    }

    /**
     * Getter for <code>public.reading.heart_rate_value</code>.
     */
    public BigDecimal getHeartRateValue() {
        return this.heartRateValue;
    }

    /**
     * Setter for <code>public.reading.heart_rate_value</code>.
     */
    public Reading setHeartRateValue(BigDecimal heartRateValue) {
        this.heartRateValue = heartRateValue;
        return this;
    }

    /**
     * Getter for <code>public.reading.systolic</code>.
     */
    public BigDecimal getSystolic() {
        return this.systolic;
    }

    /**
     * Setter for <code>public.reading.systolic</code>.
     */
    public Reading setSystolic(BigDecimal systolic) {
        this.systolic = systolic;
        return this;
    }

    /**
     * Getter for <code>public.reading.diastolic</code>.
     */
    public BigDecimal getDiastolic() {
        return this.diastolic;
    }

    /**
     * Setter for <code>public.reading.diastolic</code>.
     */
    public Reading setDiastolic(BigDecimal diastolic) {
        this.diastolic = diastolic;
        return this;
    }

    /**
     * Getter for <code>public.reading.device_id</code>.
     */
    public Integer getDeviceId() {
        return this.deviceId;
    }

    /**
     * Setter for <code>public.reading.device_id</code>.
     */
    public Reading setDeviceId(Integer deviceId) {
        this.deviceId = deviceId;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Reading other = (Reading) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.timestamp == null) {
            if (other.timestamp != null)
                return false;
        }
        else if (!this.timestamp.equals(other.timestamp))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        }
        else if (!this.type.equals(other.type))
            return false;
        if (this.heartRateValue == null) {
            if (other.heartRateValue != null)
                return false;
        }
        else if (!this.heartRateValue.equals(other.heartRateValue))
            return false;
        if (this.systolic == null) {
            if (other.systolic != null)
                return false;
        }
        else if (!this.systolic.equals(other.systolic))
            return false;
        if (this.diastolic == null) {
            if (other.diastolic != null)
                return false;
        }
        else if (!this.diastolic.equals(other.diastolic))
            return false;
        if (this.deviceId == null) {
            if (other.deviceId != null)
                return false;
        }
        else if (!this.deviceId.equals(other.deviceId))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.timestamp == null) ? 0 : this.timestamp.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.heartRateValue == null) ? 0 : this.heartRateValue.hashCode());
        result = prime * result + ((this.systolic == null) ? 0 : this.systolic.hashCode());
        result = prime * result + ((this.diastolic == null) ? 0 : this.diastolic.hashCode());
        result = prime * result + ((this.deviceId == null) ? 0 : this.deviceId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Reading (");

        sb.append(id);
        sb.append(", ").append(timestamp);
        sb.append(", ").append(type);
        sb.append(", ").append(heartRateValue);
        sb.append(", ").append(systolic);
        sb.append(", ").append(diastolic);
        sb.append(", ").append(deviceId);

        sb.append(")");
        return sb.toString();
    }
}
