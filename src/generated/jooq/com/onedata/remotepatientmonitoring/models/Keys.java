/*
 * This file is generated by jOOQ.
 */
package com.onedata.remotepatientmonitoring.models;


import com.onedata.remotepatientmonitoring.models.tables.Doctor;
import com.onedata.remotepatientmonitoring.models.tables.DoctorPatient;
import com.onedata.remotepatientmonitoring.models.tables.Patient;
import com.onedata.remotepatientmonitoring.models.tables.records.DoctorPatientRecord;
import com.onedata.remotepatientmonitoring.models.tables.records.DoctorRecord;
import com.onedata.remotepatientmonitoring.models.tables.records.PatientRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DoctorRecord> DOCTOR_PKEY = Internal.createUniqueKey(Doctor.DOCTOR, DSL.name("doctor_pkey"), new TableField[] { Doctor.DOCTOR.ID }, true);
    public static final UniqueKey<DoctorPatientRecord> DOCTOR_PATIENT_PKEY = Internal.createUniqueKey(DoctorPatient.DOCTOR_PATIENT, DSL.name("doctor_patient_pkey"), new TableField[] { DoctorPatient.DOCTOR_PATIENT.DOCTOR_ID, DoctorPatient.DOCTOR_PATIENT.PATIENT_ID }, true);
    public static final UniqueKey<PatientRecord> PATIENT_PKEY = Internal.createUniqueKey(Patient.PATIENT, DSL.name("patient_pkey"), new TableField[] { Patient.PATIENT.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<DoctorPatientRecord, DoctorRecord> DOCTOR_PATIENT__DOCTOR_PATIENT_DOCTOR_ID_FKEY = Internal.createForeignKey(DoctorPatient.DOCTOR_PATIENT, DSL.name("doctor_patient_doctor_id_fkey"), new TableField[] { DoctorPatient.DOCTOR_PATIENT.DOCTOR_ID }, Keys.DOCTOR_PKEY, new TableField[] { Doctor.DOCTOR.ID }, true);
    public static final ForeignKey<DoctorPatientRecord, PatientRecord> DOCTOR_PATIENT__DOCTOR_PATIENT_PATIENT_ID_FKEY = Internal.createForeignKey(DoctorPatient.DOCTOR_PATIENT, DSL.name("doctor_patient_patient_id_fkey"), new TableField[] { DoctorPatient.DOCTOR_PATIENT.PATIENT_ID }, Keys.PATIENT_PKEY, new TableField[] { Patient.PATIENT.ID }, true);
}
